// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  stripeCustomerId       String?   @map(name: "stripe_customer_id")
  stripeSubscriptionId   String?   @map(name: "stripe_subscription_id")
  stripePriceId          String?   @map(name: "stripe_price_id")
  stripeCurrentPeriodEnd DateTime? @map(name: "stripe_current_period_end")

  accounts     Account[]
  sessions     Session[]
  websites     Website[]
  media        Media[]
}

model UserCV {
  id         String     @id @default(auto()) @map("_id") @db.ObjectId
  ownerId    String     @db.ObjectId
  title      String
  isArchived Boolean
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
  snapshot   Snapshot[]
}

model Snapshot {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  cvId        String   @db.ObjectId
  title       String
  contentMain String
  contentSide String
  settings    Settings
  cv          UserCV   @relation(fields: [cvId], references: [id], onDelete: Cascade)
  isArchived  Boolean
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

type Settings {
  isSplit        Boolean @default(false)
  layout         String  @default("column-1-2")
  template       String  @default("Indius")
  spacing        String  @default("spacingBase")
  fontSize       String  @default("fontBase")
  color          String  @default("#222222")
  titleAlignment String  @default("center")
}

model Website {
  id            String      @id @default(auto()) @map("_id") @db.ObjectId
  name          String
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  description   String?
  published     Boolean     @default(false)
  subDomainName String?     @unique
  favicon       String?     @db.String
  ownerId       String      @db.ObjectId
  user          User        @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  pages         Page[]
  className     ClassName[]

  @@index([ownerId])
}

model ClassName {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  name       String
  color      String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  websiteId  String   @db.ObjectId
  customData String?  @db.String
  website    Website  @relation(fields: [websiteId], references: [id], onDelete: Cascade)

  @@index([websiteId])
}

model Page {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  name         String
  pathName     String   @default("")
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  visits       Int      @default(0)
  content      String?  @db.String
  order        Int
  previewImage String?  @db.String
  websiteId    String   @db.ObjectId
  website      Website  @relation(fields: [websiteId], references: [id], onDelete: Cascade)

  @@index([websiteId])
}

model Media {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  type      String?
  name      String
  link      String   @unique
  ownerId   String   @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  owner     User     @relation(fields: [ownerId], references: [id], onDelete: Cascade)

  @@index([ownerId])
}
